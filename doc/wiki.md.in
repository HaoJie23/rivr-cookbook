!set repository rivr-cookbook
# Output Turns

## Messages 

### Playing speech synthesis

!set branch message-speech-synthesis

!inline src/main/java/com/nuecho/rivr/cookbook/dialogue/Dialogue.java 29-31

### Playing an audio file

!set branch message-audio-file

!inline src/main/java/com/nuecho/rivr/cookbook/dialogue/Dialogue.java 29-32

### Playing an audio file with alternate synthesis text

!set branch message-audio-file-with-alternate

!inline src/main/java/com/nuecho/rivr/cookbook/dialogue/Dialogue.java 29-33

### Playing SSML content

!set branch message-ssml

!inline src/main/java/com/nuecho/rivr/cookbook/dialogue/Dialogue.java 32-41

### Playing mutiple audio items

!set branch message-multiple-items

!inline src/main/java/com/nuecho/rivr/cookbook/dialogue/Dialogue.java 29-34

### Playing a pause

!set branch message-pause

!inline src/main/java/com/nuecho/rivr/cookbook/dialogue/Dialogue.java 30-32

### Specifying message language

!set branch message-language

For each message turn, you can set the `language` field:

!inline src/main/java/com/nuecho/rivr/cookbook/dialogue/Dialogue.java 29-32

This can also be done globally at the VoiceXML level:

!inline src/main/java/com/nuecho/rivr/cookbook/dialogue/Dialogue.java 34-44

### Queuing a prompt with barge-in for the next interaction

!set branch message-barge-in

First, we need to disable to fetchaudio property. Maybe the platform default is already empty, but to make sure:
 
!inline src/main/java/com/nuecho/rivr/cookbook/dialogue/Dialogue.java 32-34

Then, we can queue the message with the barge-in flag set.  

!inline src/main/java/com/nuecho/rivr/cookbook/dialogue/Dialogue.java 36-42

Now, in the next interaction, the VoiceXML prompt queue will be flush because we are entering a _waiting state_. Since barge-in flag was set, the user can press a digit during the message and the interaction will complete.

!inline src/main/java/com/nuecho/rivr/cookbook/dialogue/Dialogue.java 44-49

## Interactions

### Collecting DTMF

!set branch simple-dtmf-interaction

This example show how to collect a DTMF string from the caller.  It involves the `InteractionTurn` which is created with the `InteractionBuilder`.

The first thing we need to do is to create the `DtmfRecognitionConfiguration`.  This object contains the DTMF grammar used for DTMF recognition.  
There are a few [built-in grammars](http://www.w3.org/TR/voicexml20/#dmlABuiltins) specified in the VoiceXML specification. We are going to use `digits`.

!inline src/main/java/com/nuecho/rivr/cookbook/dialogue/Dialogue.java 57-59

Then we need to build the interaction. We are going to instanciate an `InteractionBuilder` for this task.

!inline src/main/java/com/nuecho/rivr/cookbook/dialogue/Dialogue.java 60-60

Then we need to specify the prompts that we are going to use.  This is done with the `addPrompt()` method. Here we just use a SynthesisText message. 

To create the InteractionTurn itself, we invoke the `build()` method and we pass the `DtmfRecogntionConfiguration` object, meaning that we want to 
perform DTMF recognition immediately after prompt are played.  We also need to specify the time-out value, i.e. the time before a `no-input` event is raise.

!inline src/main/java/com/nuecho/rivr/cookbook/dialogue/Dialogue.java 61-62

Now that we have an `InteractionTurn`, we can execute it and receive the `InputTurn` which contains the result of this interaction.

!inline src/main/java/com/nuecho/rivr/cookbook/dialogue/Dialogue.java 64-64

We now need to inspect the result in order to know what has been done by the user.  We are going to deal with the following two outcomes

1. The user has typed a number
2. The user didn't enter anything
  
Actually, other outcomes are possible (e.g. hang-up, error) but we'll ignore that for now for the sake of simplicity.
The InputTurn contains a `recognitionInfo` property which gives us acces to the recognition result.  

!inline src/main/java/com/nuecho/rivr/cookbook/dialogue/Dialogue.java 66-74

### Collecting DTMF with interruptible message

!set branch barge-in-dtmf-interaction

This example is very similar to [[Collecting DTMF]].  Here, we will allow the user to type the number while the prompt is being played. This behaviour is also known as _barge-in_.

In order to do that, we use a diffent signature of the `addPrompt` method.  We use the one where you can specify a `DtmfRecognitionConfiguration`:

!inline src/main/java/com/nuecho/rivr/cookbook/dialogue/Dialogue.java 61-64

The `DtmfRecognitionConfiguration` object is used twice in this statement. It is important to understand why:
 
1. The fact that we specify a `DtmfRecognitionConfiguration` _in the `addPrompt()` method_ indicates that the user can perform input _while the prompt is playing_.
2. The fact that we specify a `DtmfRecognitionConfiguration` _in the `build()` method_ indicates that the user can also perform input _after the prompts are played_.

### Using a DTMF grammar

!set branch dtmf-grammar

This example shows how to use a DTMF grammar to define what should be accepted during DTMF recognition.

Here a grammar that will accept all North-American valid phone number:
 
!inline src/main/webapp/grammars/phone-number.grxml

Here's how this should be use in the dialogue:

!inline src/main/java/com/nuecho/rivr/cookbook/dialogue/Dialogue.java 57-64

Since the grammar is very simple and it doesn't provide semantic interpration, the result can be obtain
by getting the _utterance_ property of the recognition result. 

!inline src/main/java/com/nuecho/rivr/cookbook/dialogue/Dialogue.java 66-76

### Using a DTMF grammar having semantic tags

!set branch dtmf-grammar-with-semantic

In the other DTMF recognition examples where a built-in grammar was used, we have rather used the _interpretation_ property of the
recognition result because built-in grammars provide a _semantic interpretation_. It is better to work with the interpretation than the raw utterance.  

In our previous example ([[Using a DTMF grammar]]), the optional "1" will be part of the result if the caller  has pressed the key, so we must deal with the fact that
it may be present or not.  In other word, we need to do the normalization in the dialogue.   It's also possible that DTMF _utterance_ will
contains space between each digits (i.e. `5 1 4 5 5 5 1 2 3 4`), so there another normalization to do there also.  

If the grammar provide semantic tags, you have control over what is returned in the recognition result.
Moreover, if you are performing speech recognition and DTMF recognition at once, you can return the same format for the interpretation regardless 
of the input mode (i.e. DTMF or speech), making it easier to process in the dialog.
 
Here the phone number grammar modified with semantic tags:
 
!inline src/main/webapp/grammars/phone-number.grxml 9-42

Here's how to access the result:

!inline src/main/java/com/nuecho/rivr/cookbook/dialogue/Dialogue.java 66-76

Note that the phone number does not need anymore normalization at this point. The optional country code will not be part of the interpretation.

### DTMF recognition options

!set branch dtmf-options

This example shows how to tune DTMF recognition. The parameters describe here are explained in detail in the VoiceXML specification, 
[Section 6.3.3](http://www.w3.org/TR/voicexml20/#dml6.3.3) and [Appendix D - Timing Properties / DTMF Grammar](http://www.w3.org/TR/voicexml20/#L9212)

Let's start by having a grammar accepting a DTMF string between 5 and 10 digits long.

!inline src/main/java/com/nuecho/rivr/cookbook/dialogue/Dialogue.java 57-58

Now let's configure the _inter-digit time-out_, i.e. the maximum pause duration between the input of two consecutive digits before the input is considered finished. 

!inline src/main/java/com/nuecho/rivr/cookbook/dialogue/Dialogue.java 59-59 

Another option you can configure is the DTMF _term char_, i.e. the DMTF key the caller can press in order to terminate the input.  
This is the DTMF equivalent of the _Enter_ key.  So the user can press the DTMF _term char_ once the input is done, 
not having to wait for the _inter-digit time-out_.  

!inline src/main/java/com/nuecho/rivr/cookbook/dialogue/Dialogue.java 60-60 

The last parameter is _term time-out_, i.e. the time given to enter the term char once
when no other character can be accepted (in our exemple, after the 10th digit). The idea is to put a value 
for _term time-out_ that is shorter than _inter-digit time-out_ value.  

!inline src/main/java/com/nuecho/rivr/cookbook/dialogue/Dialogue.java 61-61 

The `DtmfRecognitionConfiguration` can now be used to build the `InteractionTurn`. 
Note that the time-out specify here (2 seconds) is the _no-input time-out_ (or simply _timeout_ in the VoiceXML terminology):

!inline src/main/java/com/nuecho/rivr/cookbook/dialogue/Dialogue.java 63-65

You can then perform the DTMF recognition by executing the turn:

!inline src/main/java/com/nuecho/rivr/cookbook/dialogue/Dialogue.java 67-79

### Interruptible message

!set branch interruptible-message

Sometime, it is required to play a message while giving the caller a way to interrupt it and skip the rest of it. The following example explains how to do that.

First, we need to specify a DTMF grammar accepting a single digit: 

!inline src/main/java/com/nuecho/rivr/cookbook/dialogue/Dialogue.java 54-55

We also reset the DTMF termination character as we want to make the pound key (#) a DTMF input. 

!inline src/main/java/com/nuecho/rivr/cookbook/dialogue/Dialogue.java 56-56

Then we create the interaction using the `InteractionBuilder` and we only set the `DtmfRecognitionConfiguration` for the prompt.  
There is no parameter in the `build()` method since we do not want to perform recognition once the message is played.

!inline src/main/java/com/nuecho/rivr/cookbook/dialogue/Dialogue.java 58-64

If we need to check if the prompt has been interrupted, we can check if we got any DTMF recognition (a digit) or a no-match event (pound or asterisk).

!inline src/main/java/com/nuecho/rivr/cookbook/dialogue/Dialogue.java 66-75

## Call transfers

### Blind Transfer

!set branch transfer-blind

!inline src/main/java/com/nuecho/rivr/cookbook/dialogue/Dialogue.java 20-28

### Consultation transfer

!set branch transfer-consultation

First, we need to prepare the interaction:

!inline src/main/java/com/nuecho/rivr/cookbook/dialogue/Dialogue.java 22-28

Now we have to deal with the result. First, we check for events:

!inline src/main/java/com/nuecho/rivr/cookbook/dialogue/Dialogue.java 30-35

Then, we check the status code:

!inline src/main/java/com/nuecho/rivr/cookbook/dialogue/Dialogue.java 36-49

# Other recipes

## Getting information from the platform

### Getting CLID and DNIS

!set branch clid-dnis

This example show how to get the CLID (also known as ANI) and DNIS from the VoiceXML platform. To do that, we need to read two read-only 
[variables specified by the VoiceXML specification](http://www.w3.org/TR/voicexml20/#dml5.1.4):

> `session.connection.local.uri`

>> This variable is a URI which addresses the local interpreter context device.

> `session.connection.remote.uri`

>> This variable is a URI which addresses the remote caller device.

To create a VoiceXML document reading platform variables, we use the `ScriptExecutionTurn`.  This turn will generate a VoiceXML document that will perform the following step:

1. Initialize some variables with some optional expression.
2. Execute an optional script
3. Send back the variables to the server 

Here, we will only need to initialize two variables and send the result back to our dialogue, no need for a script here as initial value assignment is enough.  
To define the variables and initial expression, we use the `VariableDeclarationList` class:

!inline src/main/java/com/nuecho/rivr/cookbook/dialogue/Dialogue.java 23-25

Then we create the `scriptExecutionTurn` with theses variable definitions:

!inline src/main/java/com/nuecho/rivr/cookbook/dialogue/Dialogue.java 27-28

We execute the turn:

!inline src/main/java/com/nuecho/rivr/cookbook/dialogue/Dialogue.java 30-30

To retrieve the result, we cast the `inputTurn.getValue()` into a `JsonObject`.  The affected values for the variables can be obtained as property of this object:

!inline src/main/java/com/nuecho/rivr/cookbook/dialogue/Dialogue.java 32-35

Note that the CLID and DNIS obtained this way are URI. If you have a SIP IVR platform integrated with the PSTN, you are likely to get SIP URI (e.g. `sip:+15145551234@proxy.example.com`) so you probably need to do 
some parsing in order to extract the numeric value of the SIP URI.
