!set repository rivr-cookbook
# Output Turns

## Messages 

### Playing speech synthesis

!set branch message-speech-synthesis

!inline src/main/java/com/nuecho/rivr/cookbook/dialogue/Dialogue.java 29-31

### Playing an audio file

!set branch message-audio-file

!inline src/main/java/com/nuecho/rivr/cookbook/dialogue/Dialogue.java 29-32

### Playing an audio file with alternate synthesis text

!set branch message-audio-file-with-alternate

!inline src/main/java/com/nuecho/rivr/cookbook/dialogue/Dialogue.java 29-33

### Playing SSML content

!set branch message-ssml

!inline src/main/java/com/nuecho/rivr/cookbook/dialogue/Dialogue.java 32-41

### Playing mutiple audio items

!set branch message-multiple-items

!inline src/main/java/com/nuecho/rivr/cookbook/dialogue/Dialogue.java 29-34

### Playing a pause

!set branch message-pause

!inline src/main/java/com/nuecho/rivr/cookbook/dialogue/Dialogue.java 30-32

### Specifying message language

!set branch message-language

For each message turn, you can set the `language` field:

!inline src/main/java/com/nuecho/rivr/cookbook/dialogue/Dialogue.java 29-32

This can also be done globally at the VoiceXML level:

!inline src/main/java/com/nuecho/rivr/cookbook/dialogue/Dialogue.java 34-44

### Queuing a prompt with barge-in for the next interaction

!set branch message-barge-in

First, we need to disable to fetchaudio property. Maybe the platform default is already empty, but to make sure:
 
!inline src/main/java/com/nuecho/rivr/cookbook/dialogue/Dialogue.java 32-34

Then, we can queue the message with the barge-in flag set.  

!inline src/main/java/com/nuecho/rivr/cookbook/dialogue/Dialogue.java 36-42

Now, in the next interaction, the VoiceXML prompt queue will be flush because we are entering a _waiting state_. Since barge-in flag was set, the user can press a digit during the message and the interaction will complete.

!inline src/main/java/com/nuecho/rivr/cookbook/dialogue/Dialogue.java 44-49

## Interactions

### Collecting DTMF

!set branch simple-dtmf-interaction

This example show how to collect a DTMF string from the caller.  It involves the `InteractionTurn` which is created with the `InteractionBuilder`.

The first thing we need to do is to create the `DtmfRecognitionConfiguration`.  This object contains the DTMF grammar used for DTMF recognition.  
There are a few [built-in grammars](http://www.w3.org/TR/voicexml20/#dmlABuiltins) specified in the VoiceXML specification. We are going to use `digits`.

!inline src/main/java/com/nuecho/rivr/cookbook/dialogue/Dialogue.java 57-59

Then we need to build the interaction. We are going to instanciate an `InteractionBuilder` for this task.

!inline src/main/java/com/nuecho/rivr/cookbook/dialogue/Dialogue.java 60-60

Then we need to specify the prompts that we are going to use.  This is done with the `addPrompt()` method. Here we just use a SynthesisText message. 

To create the InteractionTurn itself, we invoke the `build()` method and we pass the `DtmfRecogntionConfiguration` object, meaning that we want to 
perform DTMF recognition immediately after prompt are played.  We also need to specify the time-out value, i.e. the time before a `no-input` event is raise.

!inline src/main/java/com/nuecho/rivr/cookbook/dialogue/Dialogue.java 61-62

Now that we have an `InteractionTurn`, we can execute it and receive the `InputTurn` which contains the result of this interaction.

!inline src/main/java/com/nuecho/rivr/cookbook/dialogue/Dialogue.java 64-64

We now need to inspect the result in order to know what has been done by the user.  We are going to deal with the following two outcomes

1. The user has typed a number
2. The user didn't enter anything
  
Actually, other outcomes are possible (e.g. hang-up, error) but we'll ignore that for now for the sake of simplicity.
The InputTurn contains a `recognitionInfo` property which gives us acces to the recognition result.  

!inline src/main/java/com/nuecho/rivr/cookbook/dialogue/Dialogue.java 66-74

## Call transfers

### Blind Transfer

!set branch transfer-blind

!inline src/main/java/com/nuecho/rivr/cookbook/dialogue/Dialogue.java 20-28

### Consultation transfer

!set branch transfer-consultation

First, we need to prepare the interaction:

!inline src/main/java/com/nuecho/rivr/cookbook/dialogue/Dialogue.java 22-28

Now we have to deal with the result. First, we check for events:

!inline src/main/java/com/nuecho/rivr/cookbook/dialogue/Dialogue.java 30-35

Then, we check the status code:

!inline src/main/java/com/nuecho/rivr/cookbook/dialogue/Dialogue.java 36-49
